// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Decode, separate instructionA/C into signals(loads)
    Decode(in=instruction,type=instA,a=amALU,c1=zx0,c2=nx0,c3=zy0,c4=ny0,c5=f0,c6=no0,d1=loadA,d2=loadD,d3=writeM,j1=j10,j2=j20,j3=j30);
    //if i15 is 0, then out is A instruction
    //else just put the out from ALU
    Not(in=instA,out=ninstA);
    Mux16(a=outALU,b=instruction,sel=ninstA,out=inA);
    //am decide data from a register or RAM
    Mux16(a=outA,b=inM,sel=amALU,out=outAM);
    //loadA D M decide where the out data of ALU should go
    ARegister(in=inA,load=loadA,out=outA,out[0..14]=addressM);
    DRegister(in=outALU,load=loadD,out=outD);
    //the data sources from RAM or A register or D register
    ALU(x=outD,y=outAM,zx=zx0,nx=nx0,zy=zy0,ny=ny0,f=f0,no=no0,out=outALU,out=outM,zr=zr0,ng=ng0);
    //the out of Jump is the load signal of pc
    Jump(j1=j10,j2=j20,j3=j30,zr=zr0,ng=ng0,jump=loadPC);  
    //when jump is true then jump(in = A register), else go to next address
    PC(in=outA,load=loadPC,inc=true,reset=reset,out[0..14]=pc);
   
   

























}