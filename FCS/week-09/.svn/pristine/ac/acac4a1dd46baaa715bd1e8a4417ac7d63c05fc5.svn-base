public class MyQueue{
	private Node front, rear;
	public MyQueue(){
		front = null;
		rear = null;
	}
	public Node getFront(){
		return this.front;
	}
	public Node getRear(){
		return this.rear;
	}
	public void setFront(Node front){
		this.front = front;
	}
	public void setRear(Node rear){
		this.rear = rear;
	}
	// Insert one node at the end of the queue.
	public void enqueue(Node node){
		if(this.isEmpty()){
			node.setNext(null);
			this.rear = node;
			this.front = node;
		}else{
			node.setNext(this.rear);
			this.rear = node;
		}
	}
	// remove one node at the end of the queue.
	public String dequeue(){
		Node tmp = this.rear;
		Node pre = null;
		if(this.isEmpty()){
			System.out.println("Queue is empty");
			return null;
		}else{
			while(tmp.getNext() != null){
				pre = tmp;
				tmp = tmp.getNext();
			}
			this.front = pre;
			return tmp.getData();
		}
	}
	// Return TRUE when the queue is empty, otherwise, return FALSE.
	public boolean isEmpty(){
		if(this.front == null)
			return true;
		return false;
	}
	//display method
	public void displayQueue(){
		if(this.isEmpty()){
			System.out.println("Queue is empty");
		}else{
			Node tmp = this.rear;
			while(tmp != null){
				tmp.printNode();
				tmp = tmp.getNext();
			}
			System.out.print("\n");
		}
	}
}