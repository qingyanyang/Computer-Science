I took the iterative algorithm from GreeksforGreeks as reference<https://www.geeksforgeeks.org/iterative-tower-of-hanoi/>
but it's hard to learn stack() with my current knowledge, so I used Arraylist to
represent disks in each pole, and I also found the rule: direction from one pole
to the other, there are two situations

1. one pole has disks while the other pole is empty, the direction is from pole
with disks to the empty pole.

2. both two poles have disks, the direction is from the pole with smaller top
disk to the other one.

there are some method as below, to achieve set disks, get top disk, add disk to specified place
remove disk from specific place.

arraylist.add(object) to add disk1,disk2...
arraylist.get(0) to get the top disk
arraylist1.add(0, arraylist2.get(0)) to put the top disk from arraylist2 to arraylist1
at top place
arraylist2.remove(0) to take off the top disk

and then according algorithm below to print every move:

1. Calculate the total number of moves required i.e. "pow(2, n)
   - 1" here n is number of disks.

2. If number of disks (i.e. n) is even then interchange destination
   pole and auxiliary pole.

3. for i = 1 to total number of moves:
     if i%3 == 1:
    legal movement of top disk between source pole and
        destination pole
     if i%3 == 2:
    legal movement top disk between source pole and
        auxiliary pole
     if i%3 == 0:
        legal movement top disk between auxiliary pole
        and destination pole