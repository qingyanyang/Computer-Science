public class Main{
    public static void main(String[] args){
        //three cases
        int[] unsorted1 = {1,3,8,7,4,0,3,3,4,5};
        int[] ans1 = {8,7,5,4,4,3,3,3,1,0};
        int[] unsorted2 = {1,2,3,4,5,6};
        int[] ans2 = {6,5,4,3,2,1};
        int[] unsorted3 = {1};
        int[] ans3 = {1};
        //call test() insertion algorithm
        InsertionSort insert1 = new InsertionSort();

        insert1.display(ans1);
        insert1.display(insert1.sort(unsorted1));
        System.out.println(test(insert1.sort(unsorted1), ans1));

        insert1.display(ans2);
        insert1.display(insert1.sort(unsorted2));
        System.out.println(test(insert1.sort(unsorted2), ans2));

        insert1.display(ans3);
        insert1.display(insert1.sort(unsorted3));
        System.out.println(test(insert1.sort(unsorted3), ans3));
        System.out.println("");

        int[] unsorted11 = {1,3,8,7,4,0,3,3,4,5};
        int[] ans11 = {8,7,5,4,4,3,3,3,1,0};
        int[] unsorted22 = {1,2,3,4,5,6};
        int[] ans22 = {6,5,4,3,2,1};
        int[] unsorted33 = {1};
        int[] ans33 = {1};
        //call test() merge algorithm
        MergeSort merge1 = new MergeSort();

        merge1.display(ans11);
        merge1.display(merge1.sort(unsorted11));
        System.out.println(test(merge1.sort(unsorted11), ans11));

        merge1.display(ans22);
        merge1.display(merge1.sort(unsorted22));
        System.out.println(test(merge1.sort(unsorted22), ans22));

        merge1.display(ans33);
        merge1.display(merge1.sort(unsorted33));
        System.out.println(test(merge1.sort(unsorted33), ans33));
        System.out.println("");

        int[] unsorted111 = {1,3,8,7,4,0,3,3,4,5};
        int[] ans111 = {8,7,5,4,4,3,3,3,1,0};
        int[] unsorted222 = {1,2,3,4,5,6};
        int[] ans222 = {6,5,4,3,2,1};
        int[] unsorted333 = {1};
        int[] ans333 = {1};
        //call test() quick algorithm
        QuickSort quick1 = new QuickSort();
        quick1.display(ans111);
        quick1.display(quick1.sort(unsorted111));
        System.out.println(test(quick1.sort(unsorted111), ans111));

        quick1.display(ans222);
        quick1.display(quick1.sort(unsorted222));
        System.out.println(test(quick1.sort(unsorted222), ans222));

        quick1.display(ans333);
        quick1.display(quick1.sort(unsorted333));
        System.out.println(test(quick1.sort(unsorted333), ans333));
        System.out.println("");

        int[] unsorted1111 = {1,3,8,7,4,0,3,3,4,5};
        int[] ans1111 = {8,7,5,4,4,3,3,3,1,0};
        int[] unsorted2222 = {1,2,3,4,5,6};
        int[] ans2222 = {6,5,4,3,2,1};
        int[] unsorted3333 = {1};
        int[] ans3333 = {1};
        //test test method
        quick1.display(unsorted1111);
        quick1.display(ans1111);
        System.out.println(test(unsorted1111, ans1111));
        System.out.println("");

        //test compare method
        quick1.display(unsorted1111);
        quick1.display(ans1111);
        System.out.println(compare2(unsorted1111, ans1111));

        quick1.display(unsorted1111);
        quick1.display(ans2222);
        System.out.println(compare2(unsorted1111, ans2222));
        System.out.println("");
        //test findSmallestSum method
        quick1.display(unsorted1);
        findSmallestSum(unsorted1);

        quick1.display(unsorted3);
        findSmallestSum(unsorted3);
    }
    //test method to check two arrays if they are exactly same
    public static boolean test(int[] result, int[] ans){
        int n = ans.length;
        int m = result.length;
        boolean b = true;
        if(n != m){
            b = false;
            return b;
        }else{
            for(int i = 0; i < n; i++){
                if(result[i] != ans[i]){
                    b = false;
                    break;
                }
            }
            return b;
        }
    }
    //method to compare two arrays containing same elements
    public static boolean compare1(int[] arr1, int[] arr2){
        int n = arr1.length;
        int m = arr2.length;
        int k = 0;
        boolean b = true;
        if(n != m){
            b = false;
            return b;
        }else{
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    if(arr1[i] == arr2[j])
                        k++;
                }
                if(k < 1){
                    b = false;
                    break;
                }
                k = 0;
            }
            return b;
        }
    }
    //method to compare two arrays containing same elements
    public static boolean compare2(int[] arr1, int[] arr2){
        int n = arr1.length;
        int m = arr2.length;
        InsertionSort insert1 = new InsertionSort();
        boolean b = test(insert1.sort(arr1), insert1.sort(arr2));
        return b;
    }
    //method to sum the two smallest elements
    public static int findSmallestSum(int[] array){
        int sum = 0;
        float f;
        try{
            InsertionSort insert1 = new InsertionSort();
            int n = array.length;
            if(n < 2){
                f = 1 / 0;
            }else{
                sum = insert1.sort(array)[n - 2] + insert1.sort(array)[n - 1];
                System.out.println("the sum of two smallest elements: " + sum);
            }
        }catch(Exception e){
            System.out.println("please test a array with its length more than 1");
        }
        return sum;
    }
}