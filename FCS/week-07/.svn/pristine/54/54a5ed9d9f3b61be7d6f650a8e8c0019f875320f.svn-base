public class QuickSort extends MySortAlg{
    //default constructor
    QuickSort(){
        super();
    }
    //detailed sort mothod with quicksort algorithm
    public int[] sort(int[] array){
        this.n = array.length;
        if(n <= 1){
            return array;
        }else{
            int j = 0, k = -1, l = 0;
            int pivot = array[n - 1];
            //get lengths of each kinds of array
            for(int i: array){
                if(i > pivot)
                    j++;
                else if(i == pivot)
                    k++;
                else
                    l++;
            }
            int[] biggerArr = new int[j];
            int[] sameArr = new int[k];
            int[] smallerArr = new int[l];
            j = 0;
            k = 0;
            l = 0;
            for(int a: getBigger(array, pivot)){
                biggerArr[j] = a;
                j++;
            }
            for(int b: getSame(array, pivot)){
                sameArr[k] = b;
                k++;
            }
            for(int c: getSmaller(array, pivot)){
                smallerArr[l] = c;
                l++;
            }
            return concatenate(sort(biggerArr), sameArr, pivot, sort(smallerArr));
        }
    }
    //method to concatenate some arrays and elements into one array
    private int[] concatenate(int [] biggerArr, int [] sameArr, int pivot, int [] smallerArr){
        int i = biggerArr.length;
        int j = sameArr.length;
        int k = smallerArr.length;
        int[] newArray = new int[i + j + 1 + k];
        int n = 0;
        int m = 0;
        //put every element from different arrays into new array
        for(int l = 0; l < i + j + 1 + k; l++){
            if(l < i){
                newArray[l] = biggerArr[l];
            }else if(l < (i + j)){
                newArray[l] = sameArr[n];
                n++;
            }else if(l == (i + j)){
                newArray[l] = pivot;
            }else{
                newArray[l] = smallerArr[m];
                m++;
            }
        }
        return newArray;
    }
    //method to get elements bigger than the specific element into a array
    private int[] getBigger(int [] array, int pivot){
        int j = 0;
        for(int i: array){
            if(i > pivot)
                j++;
        }
        int[] biggerArr = new int[j];
        j = 0;
        for(int k: array){
            if(k > pivot){
                biggerArr[j] = k;
                j++;
            }
        }
        return biggerArr;
    }
    //method to get elements smaller than the specific element into a array
    private int[] getSmaller(int [] array, int pivot){
        int j = 0;
        for(int i: array){
            if(i < pivot)
                j++;
        }
        int[] smallerArr = new int[j];
        j = 0;
        for(int k: array){
            if(k < pivot){
                smallerArr[j] = k;
                j++;
            }
        }
        return smallerArr;
    }
    //method to get elements same with the specific element into a array
    private int[] getSame(int [] array, int pivot){
        int j = -1;
        for(int i: array){
            if(i == pivot)
                j++;
        }
        int[] sameArr = new int[j];
        for(int k = 0; k < j; k++)
            sameArr[k] = pivot;
        return sameArr;
    }
}